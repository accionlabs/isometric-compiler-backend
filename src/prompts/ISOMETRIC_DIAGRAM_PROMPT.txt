You are tasked with generating a technical isometric architecture diagram based on the following set of requirements. The architecture should be described in JSON format, using 3D shapes and 2D shapes, where:

1. The diagram consists of multiple 3D and 2D shapes arranged on top of a 'layer4x3' grid with 4 rows and 3 columns, which serves as the base layer. The grid has 12 attachment points in the format top-xx where xx is the row and column position, as shown below:
   - Top Row: top-a1, top-a2, top-a3
   - Second Row: top-b1, top-b2, top-b3
   - Third Row: top-c1, top-c2, top-c3
   - Fourth Row: top-d1, top-d2, top-d3

2. By default, 3D shapes attach to layer4x3 using the `relativeToId` field with position as `top-xx`. 3D shapes can also be attached to other 3D shapes using `relativeToId` field in which case valid positions would be `top`, `front-left`, `front-right`. These 3D shapes include:
   - layer4x3: Forms the base structure for other shapes.
   - monitor: Represents a web interface on a monitor.
   - laptop: Represents a web interface on a laptop.
   - service: Indicates a service with REST API, suitable for individual entities such as customers, drivers, trucks, and goods.
   - mainframe: A mainframe application.
   - database: A shape representing the database, which can be placed on top of microservices or separately if shared across services.
   - funnel: Represents a filter, ideally stacked on top of a service.
   - connectors: Represents various connectors, on top of which services are ideally stacked.

3. The 2D shapes always gets attached to 3D shapes as part of attached2DShapes key with attachment points as top, screen, or panel. These 2D shapes include:
   - ai-model: Would be part of a service shape to indicate it’s an AI-model service. Attachment: top.
   - vectors: Would be part of a database shape to indicate it’s a vector-based database. Attachment: top.
   - graph: Would be part of a database shape to indicate it’s a graph-based database. Attachment: top.
   - process: Indicates a workflow that will be part of a service. Attachment: top.
   - query vectors: Part of a service indicating that it needs to query a vector DB. Attachment: top.
   - ui on screen: A UI inside the monitor or laptop screen. Attachment: screen.
   - flowchart: A flowchart ideally on top of a service. Attachment: top.

4. Follow the JSON structure and instructions provided below:

--- Instructions ---
{format_instructions}
--- End of Instructions ---

**Example Requirement:**

"I need to develop an app for our drivers who handle daily pickups and deliveries. Customers will place orders to transport goods, and based on the type of goods, an appropriate truck will be assigned along with a driver, considering their current location. The driver will then transport the goods to the recipient, who will acknowledge receipt upon delivery."

**Expected Diagram Structure:**

- Identify entities such as customers, drivers, goods, and trucks as microservices.
- Include two monitors: one for a web interface and one for a mobile interface.
- Attach a microservice with a 'process' 2D shape to represent the workflow for managing deliveries.
- A database shape should be placed on top of each microservice if it’s specific to that service. In cases where the database is shared, it can be shown separately.

**Expected JSON Output:**
[
    {{ "id": "layer1", "shape": "layer4x3", "attached2DShapes": [], "position": "top", "relativeToId": null }},
    {{ "id": "customerService", "shape": "service", "attached2DShapes": [ {{ "name": "process", "attachedTo": "top" }} ], "position": "top-a1", "relativeToId": "layer1" }},
    {{ "id": "driverService", "shape": "service", "attached2DShapes": [], "position": "top-a2", "relativeToId": "layer1" }},
    {{ "id": "goodsService", "shape": "service", "attached2DShapes": [], "position": "top-a3", "relativeToId": "layer1" }},
    {{ "id": "truckService", "shape": "service", "attached2DShapes": [], "position": "top-b1", "relativeToId": "layer1" }},
    {{ "id": "webInterface", "shape": "monitor", "attached2DShapes": [], "position": "top-d1", "relativeToId": "layer1" }},
    {{ "id": "mobileInterface", "shape": "monitor", "attached2DShapes": [], "position": "top-d2", "relativeToId": "layer1" }},
    {{ "id": "customerDB", "shape": "database", "attached2DShapes": [], "position": "top", "relativeToId": "customerService" }},
    {{ "id": "sharedDB", "shape": "database", "attached2DShapes": [], "position": "top-c2", "relativeToId": "layer1" }}
]

Ensure the JSON output is structured correctly and matches the requirement provided. The diagram should be optimized to clearly indicate the architecture layout based on the position, shape attributes, and the relative positioning. Each entity should be positioned according to the requirement, and databases should be shown either stacked on relevant microservices or separately if shared.

Requirement: {question}

JSON: