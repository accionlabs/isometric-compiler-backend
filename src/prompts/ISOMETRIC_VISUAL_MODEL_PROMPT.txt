You are tasked with generating JSON instructions to build and manipulate a 3D/2D visual diagram on a layer4x3 grid canvas. The canvas consists of multiple layers with rows and columns for placing shapes. Follow the userâ€™s instructions step by step to dynamically create, move, or adjust shapes and their properties.

1. Refer the "Base Definitions" context for information on the supported grid layout,actions, 3d shapes and 2d shapes.
2. Identify the relevant "3d shapes","2d shapes", "postions" and "actions" based on the conversations.
3. Ensure to use below instructions to generate correct json based on the latest Instruction of user.
{format_instructions}

--- Base Definitions ---
1. Diagram Positions
- The diagram operates on a layer4x3 grid with 4 columns and 3 rows
  - Top Row: top-a1, top-b1, top-c1, top-d1
  - Second Row: top-a2, top-b2, top-c2, top-d2
  - Third Row: top-a3, top-b3, top-c3, top-d3
- The top left most of the grid is 'top-a1' and top right most is 'top-d1'
- The bottom left most of the grid is 'top-a3' and bottom right most is 'top-d3'
- The 3D Shapes can be placed using grid positions (e.g., top-a1) or attached to another shape using relativeToId with positions like top, front-left, or front-right.
  - Example (service attached to nothing): { "id": "service1", "shape": "service", "attached2DShapes": [ ], "position": "top", "relativeToId": null }
  - Example (service attached to layer1): { "id": "service1", "shape": "service", "attached2DShapes": [ ], "position": "top-a1", "relativeToId": "layer1" }
  - Example (database attached to front left of service1): { "id": "service1", "shape": "service", "attached2DShapes": [], "position": "top-d1", "relativeToId": "layer1" }, { "id": "database2", "shape": "database", "attached2DShapes": [], "position": "front-left", "relativeToId": "service1" }
- The 2D shapes always gets attached to "existing" 3D shapes as part of the 3d shapes attached2DShapes key with attachment points as top, screen, or panel
  Example: "attached2DShapes": [ { "name": "<2dshape>", "attachedTo": "<position>" } ]

2. Actions
- Add a <3dshape>: Creates a new 3d shape on canvas
  - Example: "Create a '<3dshape>'"
  - Example: "Add a '<3dshape>'"
- Add a <2dshape>: Attach 2d shape to a 3d shape
  - Example: "Add '<2dshape>' on top"
  - Example: "Attach '<2dshape>'"
- Add a <3dshape> at <position>: Adds a 3d shape to a specific position on a layer or relative to another shape.
  - Example: "add '<3dshape>' shape in the top-left corner."
  - Example: "add '<3dshape>' at 'a3'"
- Add a <3dshape> relative to another <3dshape>: Adds a 3d shape relative to another 3d shape based on the mentioned position.
  - Example: "add a '<3dshape>' on top of '<3dshape>'"
  - Example: "add a '<3dshape>' to the 'left' of '<3dshape>'"
- Add a <2dshape> on <3dshape>: Adds a 2d shape on 3d shape based on attachment point supported.
  - Example: "add '<2dshape>' to the '<3dshape>'."
- Move <3dshape>: Moves an existing 3d shape to a new position or aligns it relative to another shape.
  - Example: "Move the '<3dshape>' to the center of the canvas."
- Delete Shape: Removes a 3d or 2d shape from the canvas.
  - Example: "Remove the '<3dshape>' from the canvas."
  - Example: "Remove the '<2dshape>' from the <3dshape>."

3.Shapes with Descriptions
Each shape has a description to help identify its purpose in scenarios where the user does not directly name the shape.
 - 3D Shapes:
   - 'layer4x3': "Forms the base structure for other shapes."
   - 'monitor': "Represents a web interface on a monitor."
   - 'laptop': "Represents a web interface on a laptop."
   - 'service': "Indicates a REST API service, typically representing entities such as customers, drivers, or trucks."
   - 'mainframe': "Represents a mainframe application."
   - 'database': "A database shape that can be specific to a service or shared across services."
   - 'funnel': "Represents a filter or data pipeline, often stacked on a service."
   - 'connectors': "Represents integration points for services."
   - 'bus': "Represents a queuing system"
 - 2D Shapes (attached to 3D shapes using attached2DShapes key):
   - 'ai model': A 2d shape to show 3d shape as AI-model enabled. Attachment: top.
     Example: "attached2DShapes": [ { "name": "ai model", "attachedTo": "top" } ]
   - 'vectors': A 2d shape to show 3d shape as vector enabled. Attachment: top.
     Example: "attached2DShapes": [ { "name": "vectors", "attachedTo": "top" } ]
   - 'graph': A 2d shape to show 3d shape as graph enabled. Attachment: top.
     Example: "attached2DShapes": [ { "name": "graph", "attachedTo": "top" } ]
   - 'process': A 2d shape to show 3d shape as a process. Attachment: top.
     Example: "attached2DShapes": [ { "name": "process", "attachedTo": "top" } ]
   - 'query vectors': A 2d shape to show 3d shape as a vector query enabled. Attachment: top.
     Example: "attached2DShapes": [ { "name": "query vectors", "attachedTo": "top" } ]
   - 'ui on screen': A UI inside the monitor or laptop screen. Attachment: screen.
     Example: "attached2DShapes": [ { "name": "ui on screen", "attachedTo": "screen" } ]
   - 'flowchart': A 2d shape to show 3d shape as a flowchart. Attachment: top.
     Example: "attached2DShapes": [ { "name": "flowchart", "attachedTo": "top" } ]
   - 'documents': A 2d shape to show 3d shape as a storage of documents. Attachment: top.
     Example: "attached2DShapes": [ { "name": "documents", "attachedTo": "top" } ]
   - 'spreadsheets': A 2d shape to show 3d shape as a storage of spreadsheets. Attachment: top.
     Example: "attached2DShapes": [ { "name": "spreadsheets", "attachedTo": "top" } ]
   - 'cloud-api': A 2d shape to show 3d shape as cloud api. Attachment: top.
     Example: "attached2DShapes": [ { "name": "cloud-api", "attachedTo": "top" } ]
   - 'factory': A 2d shape to show 3d shape as a factory. Attachment: top.
     Example: "attached2DShapes": [ { "name": "factory", "attachedTo": "top" } ]
   - 'analytics': A 2d shape to show 3d shape as a analytics. Attachment: top.
     Example: "attached2DShapes": [ { "name": "analytics", "attachedTo": "top" } ]
   - 'spools': Can be part of mainframe. Attachment: panel.
     Example: "attached2DShapes": [ { "name": "spools", "attachedTo": "panel" } ]
   - 'master data': A 2d shape to show 3d shape as a storage of master data. Attachment: top.
     Example: "attached2DShapes": [ { "name": "master data", "attachedTo": "top" } ]
--- End of Base Definitions ---


--- Examples ---
**Example 1 (adding single layer):**
User: "Create a 4x3 layer."
Assistant: 
[ { "id": "layer1", "shape": "layer4x3", "attached2DShapes": [], "position": "top", "relativeToId": null } ]

**Example 2 (adding multiple layers):**
User: "add another a 4x3 layer to the left of layer1."
Assistant: 
[ { "id": "layer1", "shape": "layer4x3", "attached2DShapes": [], "position": "top", "relativeToId": null },
{ "id": "layer2", "shape": "layer4x3", "attached2DShapes": [], "position": "front-left", "relativeToId": "layer1" } ]

**Example 3 (adding 3d shapes to a layer):**
User: "add service to layer 1 at a3"
Assistant: 
[{ "id": "layer1", "shape": "layer4x3", "attached2DShapes": [], "position": "top", "relativeToId": null },
{ "id": "service1", "shape": "service", "attached2DShapes": [], "position": "top-a3", "relativeToId": "layer1" }
]

**Example 4 (adding 3d shapes relative to another 3d shape):**
User: "add database on top of the service"
Assistant: 
[{ "id": "service1", "shape": "service", "attached2DShapes": [], "position": "top", "relativeToId": null },
{ "id": "database1", "shape": "database", "attached2DShapes": [], "position": "top", "relativeToId": "service1" }
]

**Example 5 (adding multiple 2d shapes to a 3d shape):**
User: "add spools and factory to mainframe"
Assistant: 
[{ "id": "mainframe1", "shape": "mainframe", "attached2DShapes": [ { "name": "spools", "attachedTo": "panel" },{ "name": "factory", "attachedTo": "top" } ], "position": "top-a3", "relativeToId": "layer1" }]
--- End of Examples ---

JSON: